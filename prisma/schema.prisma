// Prisma schema for NextAuth and application models
// Datasource
 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 }

 generator client {
  provider = "prisma-client-js"
 }

 model User {
  id            String   @id @default(cuid())
  name          String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  // App relations
  emailThreads  EmailThread[]
  calendarEvents CalendarEvent[]
  userSyncState UserSyncState?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
 }

 model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // Encrypted at rest
  access_token      String? // Encrypted at rest
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([provider, userId])
 }

 model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }

 model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
 }

 enum ProcessedReason {
  created
  not_relevant
  no_datetime
  error
 }

 model EmailThread {
  id                  String          @id @default(cuid())
  userId              String
  gmailThreadId       String
  latestMessageId     String
  lastMessageAt       DateTime
  processedAt         DateTime?
  processedReason     ProcessedReason?
  createdCalendarEventId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, gmailThreadId])
  @@index([userId, processedAt])
  @@index([userId, lastMessageAt])
 }

 model CalendarEvent {
  id               String   @id @default(cuid())
  userId           String
  gmailThreadId    String
  calendarEventId  String   @unique
  htmlLink         String
  title            String
  start            DateTime
  end              DateTime
  attendees        Json
  sourceSummary    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([userId, gmailThreadId])
  @@index([userId, start])
 }

 model UserSyncState {
  id            String   @id @default(cuid())
  userId        String   @unique
  lastSyncedAt  DateTime?
  lastHistoryId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 }
